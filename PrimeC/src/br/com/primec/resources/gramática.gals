#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
Package = br.com.primec.core
ScannerCaseSensitive = true
ScannerTable = Compact
Input = Stream
Parser = SLR
#RegularDefinitions
L        : [A-Za-z]
D        : [0-9]
WS       : [\ \t\n\r]


#Tokens
//Delimitadores e Pontuação
"(" : "("
")" : ")"
";" : ";"
"{" : "{"
"}" : "}"
"[" : "["
"]" : "]"
"," : ","
":" : ":"
"." : "."
"=" : "="

HEX_VL     : 0x[0-9a-fA-F]+
BIN_VL     : b[01]+
INT_VL     : {D}+
DBL_VL     : {D}+(\.?{D})*
STR_VL     : \".*\"
BOOL_VL    : true|false

OP_MAIS    : "+"
OP_MENOS   : "-"
OP_VEZES   : "*"
OP_DIVISAO : "/"

OP_GT      : ">"
OP_LT      : "<"
OP_EQ      : "=="
OP_LTE     : "<="
OP_GTE     : ">="
OP_NEQ     : "!="

OP_NOT     : "!"
OP_AND     : "&&"
OP_OR      : "||"

OP_LSHIFT  : "<<"
OP_RSHIFT  : ">>"
OP_BWS_AND : "&"
OP_BWS_OR  : "|"
OP_BWS_XOR : "^"
OP_BWS_NOT : "~"

ID         : {L} ( {L} | {D} | _ )*

//PALAVRAS RESERVADAS
MAIN       = ID : "main"
RETURN     = ID : "ret"
CONST      = ID : "const"
// DECLARAÇÃO DE VARIÁVEIS
VOID       = ID : "void"
HEX        = ID : "hex"
BIN        = ID : "bin"
INT        = ID : "int"
DBL        = ID : "dbl"
STR        = ID : "str"
// DESVIOS CONDICIONAIS
IF         = ID : "if"
ELSE       = ID : "else"
// LAÇOS DE REPETIÇÃO
WHILE      = ID : "while"
DO         = ID : "do"
FOR        = ID : "for"
//ENTRADA E SAÍDA
INPUT      = ID : "input"
OUTPUT     = ID : "output"

//ignorar espaços em branco e comentários
: {WS}*
: [\s\t\n\r]*

: (/)(/).*
: "/"\*([^"*"]|[\r\n]|(\*+([^"*""/"]|[\r\n])))*\*+"/"

#NonTerminals
<prog>
<func_dec>
<func>
<main>
<v_typ>
<cmd_seq>
<cmd>
<v_dec>
<vect>
<v_val>
<attrib>
<v_params>
<v_prm>
<for>
<while>
<do_while>
<f_params>
<f_prm>
<func_call>
<if>
<else>
<expression>
<expression1>
<expression2>
<expression3>
<expression4>
<expression5>
<expression6>
<expression7>
<expression8>
<expression9>
<expression10>
<expression11>
<expression12>
<expression13>

<op_relational>
<op_term>
<op_factor>
<input>
<output>
#Grammar
<prog>     	::= <func_dec> <main> | <main> ;

<func_dec> 	::= <func> <func_dec> | <func> ;
<func>      	::= <v_typ> ID #3 "(" <v_params> ")" "{" <cmd_seq> "}" #10
		  | <v_typ> ID #3 "(" <v_params> ")" "{" "}" #10 ;

<v_params> 	::= #23 <v_prm> "," <v_params> | #23 <v_prm> ;
<v_prm>     	::= <v_typ> ID #24 | î ;

<f_params> 	::= <f_prm> "," <f_params> | <f_prm> ;
<f_prm>     	::= <expression> | î ;

<main>      	::= VOID MAIN #9 "(" ")" "{" <cmd_seq> "}" #10 #101
		  | VOID MAIN #9 "(" ")" "{" "}" #10 #101 ;

<cmd_seq>   	::= <cmd> #99 <cmd_seq> | <cmd> #99;

<cmd>       	::= CONST <v_dec> ";"
		  | <v_dec> ";" 
		  | <attrib> #34 ";"
		  | <for>
		  | <while>
		  | <do_while> ";"
		  | <func_call> ";"
		  | <if>
		  | RETURN #28 <expression> ";"
		  | #29 <input> #29 ";"
		  | #30 <output> ";" ;

<attrib>    	::= <v_dec> #45 "=" #33 <expression>
		  | ID #100 "=" #33 <expression>
		  | <vect> "=" #33 <expression>  ;

<v_dec>     	::= <v_typ> ID #2
		  | <v_typ> ID #4 "[" <expression> "]" ;

<vect>		::= ID #100 "[" <expression> "]" ;

<v_typ>     	::= HEX #1
		  | BIN #1
		  | INT #1
		  | DBL #1
		  | STR #1 ;

<v_val>     	::= HEX_VL
		  | BIN_VL
		  | INT_VL #70
		  | DBL_VL #71
		  | BOOL_VL
		  | STR_VL ;

<func_call> 	::= ID #48 "(" <f_params> ")" ;

<for>       	::= FOR #9 "(" INT #1 ID #20 #45 "=" INT_VL #70 ";" <expression> ";" ID #100 OP_MAIS OP_MAIS ")" #47 "{" <cmd_seq> "}" #10 #41
		  | FOR #9 "(" INT #1 ID #20 #45 "=" INT_VL #70 ";" <expression> ";" ID #100 OP_MAIS OP_MAIS ")" #47 "{" "}" #10 #41 ;

<while>     	::= WHILE #9 "(" <expression> ")" #47 "{" <cmd_seq> "}" #10 #42
		  | WHILE #9 "(" <expression> ")" #47 "{" "}" #10 #42 ;

<do_while>  	::= DO #9 "{" <cmd_seq> "}" WHILE "(" <expression> ")" #10
		  | DO #9 "{" "}" WHILE "(" <expression> ")" #10 ;

<if>         	::= IF #9 "(" <expression> ")" #47 "{" <cmd_seq> "}" #10 #43
		  | IF #9 "(" <expression> ")" #47 "{" <cmd_seq> "}" #10 <else>
		  | IF #9 "(" <expression> ")" #47 "{" "}" #10 #43
		  | IF #9 "(" <expression> ")" #47 "{" "}" #10 <else> ;

<else>       	::= ELSE <if>
		  | ELSE #9 #44 "{" "}" #10 #43
		  | ELSE #9 #44 "{" <cmd_seq> "}" #10 #43 ;

<expression>	::= <expression>	 OP_LSHIFT #49 <expression1> #50	| <expression1> ;
<expression1>	::= <expression1> OP_RSHIFT #49 <expression2> #51	| <expression2> ;
<expression2>	::= <expression2> OP_BWS_AND <expression3> | <expression3> ;
<expression3>	::= <expression3> OP_BWS_OR <expression4>	| <expression4> ;
<expression4>	::= <expression4> OP_BWS_XOR <expression5> | <expression5> ;
<expression5>	::= <expression5> OP_BWS_NOT <expression6> | <expression6> ;
<expression6>	::= <expression6> OP_OR <expression7> | <expression7> ;
<expression7>	::= <expression7> OP_AND	<expression8> | <expression8> ;
<expression8>	::= OP_NOT <expression8> | <expression9> ;
<expression9>	::= <expression9> <op_relational> #49 #46 <expression10> | <expression10> ;
<expression10>	::= <expression10> <op_term> #49 <expression11> #60 | <expression11> ;
<expression11>	::= <expression11> <op_factor> <expression12> #61 | <expression12> ;
<expression12>	::= OP_MENOS #49 <expression12> #62 | <expression13> ;
<expression13>	::= <v_val> | "(" <expression> ")" | ID #100 #32 | <vect> #35 | <func_call> #22 ;

<op_relational>	::= OP_GT | OP_LT | OP_GTE | OP_LTE | OP_NEQ | OP_EQ ;

<op_term>	::= OP_MAIS | OP_MENOS ;

<op_factor>	::= OP_VEZES | OP_DIVISAO ;

<input>		::= INPUT "(" ID #100 #31 ")" 
		  | INPUT "(" <vect> ")" ;

<output>	::= OUTPUT "(" <expression> #30 ")" ;
